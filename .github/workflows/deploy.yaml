name: Build, Terraform, and Deploy React App

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  CI: ""

jobs:
  test-nest-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Backend Dependencies
        run: npm ci
        working-directory: ./server

      - name: Run Jest Tests
        run: npm run test
        working-directory: ./server

  provision-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.tf_outputs.outputs.instance_ip }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.3.7

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Set Terraform Outputs
        id: tf_outputs
        run: |
          echo "instance_ip=$(terraform output -raw server_ip)" >> $GITHUB_OUTPUT
        working-directory: ./terraform

  build-react-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Build React App
        run: npm run build
        working-directory: ./frontend

      - name: Zip Build Output
        run: zip -r react-build.zip build
        working-directory: ./frontend

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: frontend/react-build.zip

  deploy-react-app:
    runs-on: ubuntu-latest
    needs:
      - provision-infrastructure
      - build-react-app
    steps:
      - name: Download React Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: react-build

      - name: Upload React Build to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ needs.provision-infrastructure.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "react-build.zip"
          target: "~/"

      - name: SSH and Deploy on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.provision-infrastructure.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo yum install -y unzip nginx

            mkdir -p ~/alliance-app
            unzip -o ~/react-build.zip -d ~/alliance-app

            sudo rm -f /etc/nginx/conf.d/default.conf

            cat <<EOF | sudo tee /etc/nginx/conf.d/react.conf
            server {
              listen 80;
              server_name _;

              root /home/ec2-user/alliance-app/build;
              index index.html;

              location / {
                try_files \$uri /index.html;
              }
            }
            EOF

            chmod o+x /home/ec2-user
            chmod -R o+rx /home/ec2-user/alliance-app

            sudo systemctl restart nginx

  build-nest-backend:
    runs-on: ubuntu-latest
    needs:
      - test-nest-backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci
        working-directory: ./server

      - name: Build NestJS App
        run: npm run build
        working-directory: ./server

      - name: Zip Build Output
        run: zip -r nest-build.zip dist package.json package-lock.json
        working-directory: ./server

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nest-build
          path: server/nest-build.zip
  deploy-nest-backend:
    runs-on: ubuntu-latest
    needs:
      - provision-infrastructure
      - build-nest-backend
    steps:
      - name: Download NestJS Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: nest-build

      - name: Upload NestJS Build to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ needs.provision-infrastructure.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "nest-build.zip"
          target: "~/"

      - name: SSH and Deploy Backend on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.provision-infrastructure.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install nvm and Node.js 20
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            nvm install 20
            nvm use 20
            nvm alias default 20

            mkdir -p ~/nest-backend
            unzip -o ~/nest-build.zip -d ~/nest-backend

            cd ~/nest-backend
            npm install --production

            npm install -g pm2
            pm2 delete nest-app || true
            pm2 start dist/main.js --name nest-app
            pm2 save
