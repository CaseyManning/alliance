name: Build, Terraform, and Deploy React App

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  CI: ""

jobs:
  test-backend-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Backend Dependencies
        run: npm ci
        working-directory: ./server

      - name: Run Jest Tests
        run: npm run test:e2e
        working-directory: ./server

  provision-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.tf_outputs.outputs.instance_ip }}
      rds_port: ${{ steps.tf_outputs.outputs.rds_port }}
      rds_username: ${{ steps.tf_outputs.outputs.rds_username }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.3.7

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Set Terraform Outputs
        id: tf_outputs
        run: |
          echo "instance_ip=$(terraform output -raw server_ip)" >> $GITHUB_OUTPUT
          echo "rds_port=$(terraform output -raw rds_port)" >> $GITHUB_OUTPUT
          echo "rds_username=$(terraform output -raw rds_username)" >> $GITHUB_OUTPUT
        working-directory: ./terraform

  build-react-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Activate Yarn 4.x
        run: corepack prepare yarn@4.9.1 --activate

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "yarn"

      - name: Install Dependencies
        run: corepack yarn install --immutable
        working-directory: ./

      - name: Build React App
        run: corepack yarn workspace @alliance/frontend build
        working-directory: ./

      - name: Zip client + server
        run: |
          cd build
          zip -r react-client.zip client
          zip -r react-server.zip server
        working-directory: ./apps/frontend

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: react-ssr
          path: |
            apps/frontend/build/react-client.zip
            apps/frontend/build/react-server.zip

  build-admin-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Activate Yarn 4.x
        run: corepack prepare yarn@4.9.1 --activate

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "yarn"

      - name: Install Dependencies
        run: corepack yarn install --immutable
        working-directory: ./

      - name: Build React App
        run: corepack yarn workspace @alliance/admin build
        working-directory: ./

      - name: Zip Build Output
        run: zip -r admin-build.zip dist
        working-directory: ./apps/admin

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: admin-build
          path: apps/admin/admin-build.zip

  deploy-react-app:
    runs-on: ubuntu-latest
    needs:
      - provision-infrastructure
      - build-react-app
    steps:
      - name: Download React Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: react-ssr

      - name: Upload React Build to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ needs.provision-infrastructure.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            react-client.zip
            react-server.zip
          target: "~/"

      - name: SSH and Deploy frontend SSR on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.provision-infrastructure.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo yum install -y unzip nginx
            curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
            sudo yum install -y nodejs
            sudo npm i -g pm2  

            nvm install 20
            nvm use 20
            nvm alias default 20

            unzip -o ~/client.zip -d ~/alliance-app/client
            unzip -o ~/server.zip -d ~/alliance-app/server

            cd ~/alliance-app/server
            npm ci --omit=dev

            npm install -g pm2
            pm2 delete client-ssr || true
            pm2 start index.js --name client-ssr
            pm2 save

  deploy-admin-app:
    runs-on: ubuntu-latest
    needs:
      - provision-infrastructure
      - build-admin-frontend
    steps:
      - name: Download Admin Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: admin-build

      - name: Upload Admin Build to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ needs.provision-infrastructure.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "admin-build.zip"
          target: "~/"

      - name: SSH and Deploy on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.provision-infrastructure.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo yum install -y unzip nginx

            mkdir -p ~/alliance-app
            unzip -o ~/admin-build.zip -d ~/admin-app

            sudo rm -f /etc/nginx/conf.d/default.conf

            if [ ! -f /etc/nginx/conf.d/admin.conf ]; then
              cat <<EOF | sudo tee /etc/nginx/conf.d/admin.conf

              server {
                listen 80;
                server_name admin.${{vars.DOMAIN_NAME}};
                http2 on;

                root /home/ec2-user/admin-app/dist;
                index index.html;

                location / {
                  try_files \$uri /index.html;
                }
              }
            EOF
            fi

            chmod o+x /home/ec2-user
            chmod -R o+rx /home/ec2-user/alliance-app

            sudo systemctl restart nginx

  build-nest-backend:
    runs-on: ubuntu-latest
    needs:
      - test-backend-e2e
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci
        working-directory: ./server

      - name: Build NestJS App
        run: npm run build
        working-directory: ./server

      - name: Zip Build Output
        run: zip -r nest-build.zip dist package.json package-lock.json
        working-directory: ./server

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nest-build
          path: server/nest-build.zip

  deploy-nest-backend:
    runs-on: ubuntu-latest
    needs:
      - provision-infrastructure
      - build-nest-backend
    steps:
      - name: Download NestJS Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: nest-build

      - name: Upload NestJS Build to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ needs.provision-infrastructure.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "nest-build.zip"
          target: "~/"

      - name: SSH and Deploy Backend on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.provision-infrastructure.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install nvm and Node.js 20
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            nvm install 20
            nvm use 20
            nvm alias default 20

            export DB_HOST=${{ secrets.RDS_HOSTNAME }}
            export DB_PORT=${{ needs.provision-infrastructure.outputs.rds_port }}
            export DB_USERNAME=${{ needs.provision-infrastructure.outputs.rds_username }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            export JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            export NODE_ENV=production
            export DB_NAME="alliance"
            export ADMIN_USER=${{ secrets.ADMIN_USER }}
            export ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}

            mkdir -p ~/nest-backend
            unzip -o ~/nest-build.zip -d ~/nest-backend

            cd ~/nest-backend
            npm install --production

            npm install -g pm2
            pm2 delete nest-app || true
            pm2 start dist/main.js --name nest-app
            pm2 save

  verify-deployment:
    needs:
      - deploy-nest-backend
      - deploy-react-app
      - deploy-admin-app
    runs-on: ubuntu-latest
    steps:
      - name: Check main app
        run: |
          echo "Checking main app..."
          curl --fail --silent --show-error http://${{vars.DOMAIN_NAME}} > /dev/null
          echo "main app is reachable"

      - name: Check admin app
        run: |
          echo "Checking admin app..."
          curl --fail --silent --show-error http://admin.${{vars.DOMAIN_NAME}} > /dev/null
          echo "admin app is reachable"
  verify-https:
    needs:
      - deploy-nest-backend
      - deploy-react-app
      - deploy-admin-app
    runs-on: ubuntu-latest
    steps:
      - name: Check main app
        run: |
          echo "Checking main app..."
          curl --fail --silent --show-error https://${{vars.DOMAIN_NAME}} > /dev/null
          echo "main app https ok"

      - name: Check admin app
        run: |
          echo "Checking admin app..."
          curl --fail --silent --show-error https://admin.${{vars.DOMAIN_NAME}} > /dev/null
          echo "admin app https ok"

  verify-api:
    needs:
      - deploy-nest-backend
    runs-on: ubuntu-latest
    steps:
      - name: Check API health
        run: |
          echo "Checking API health..."
          curl --fail --silent --show-error https://${{vars.DOMAIN_NAME}}/api/ > /dev/null
          echo "API health ok"

  # build-mobile-app:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Enable Corepack
  #       run: corepack enable

  #     - name: Activate Yarn 4.x
  #       run: corepack prepare yarn@4.9.1 --activate

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: "yarn"

  #     - name: Install Dependencies
  #       run: corepack yarn install --immutable
  #       working-directory: ./

  #     - name: Build Mobile App
  #       run: corepack yarn workspace @alliance/mobile build
  #       working-directory: ./
