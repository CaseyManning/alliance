// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  AppHealthCheckData,
  AuthLoginData,
  AuthLoginResponse,
  AuthAdminLoginData,
  AuthAdminLoginResponse,
  AuthRegisterData,
  AuthRefreshTokensData,
  AuthRefreshTokensResponse,
  AuthMeData,
  AuthMeResponse,
  ActionsCreateData,
  ActionsRemoveData,
  ActionsFindOneData,
  ActionsFindOneResponse,
  ActionsUpdateData,
  ActionsJoinData,
  ActionsFindAllData,
  ActionsFindAllResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const appHealthCheck = <ThrowOnError extends boolean = false>(
  options?: Options<AppHealthCheckData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: "/",
      ...options,
    }
  );
};

export const authLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthLoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AuthLoginResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const authAdminLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthAdminLoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AuthAdminLoginResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/admin/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const authRegister = <ThrowOnError extends boolean = false>(
  options: Options<AuthRegisterData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/auth/register",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    }
  );
};

export const authRefreshTokens = <ThrowOnError extends boolean = false>(
  options?: Options<AuthRefreshTokensData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthRefreshTokensResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/refresh",
    ...options,
  });
};

export const authMe = <ThrowOnError extends boolean = false>(
  options?: Options<AuthMeData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthMeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/me",
    ...options,
  });
};

export const actionsCreate = <ThrowOnError extends boolean = false>(
  options: Options<ActionsCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      url: "/actions/create",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    }
  );
};

export const actionsRemove = <ThrowOnError extends boolean = false>(
  options: Options<ActionsRemoveData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: "/actions/{id}",
    ...options,
  });
};

export const actionsFindOne = <ThrowOnError extends boolean = false>(
  options: Options<ActionsFindOneData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ActionsFindOneResponse,
    unknown,
    ThrowOnError
  >({
    url: "/actions/{id}",
    ...options,
  });
};

export const actionsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ActionsUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: "/actions/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const actionsJoin = <ThrowOnError extends boolean = false>(
  options: Options<ActionsJoinData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      url: "/actions/{id}",
      ...options,
    }
  );
};

export const actionsFindAll = <ThrowOnError extends boolean = false>(
  options?: Options<ActionsFindAllData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ActionsFindAllResponse,
    unknown,
    ThrowOnError
  >({
    url: "/actions",
    ...options,
  });
};
