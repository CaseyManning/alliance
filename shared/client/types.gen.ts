// This file is auto-generated by @hey-api/openapi-ts

export type SignInDto = {
    email: string;
    password: string;
    mode: 'cookie' | 'header';
};

export type SignInResponseDto = {
    isAdmin: boolean;
    access_token: string;
    refresh_token: string;
};

export type SignUpDto = {
    name: string;
    email: string;
    password: string;
};

export type AccessToken = {
    access_token: string;
};

export type UserDto = {
    id: number;
    name: string;
    email: string;
    admin: boolean;
};

export type ProfileDto = {
    id: number;
    name: string;
    email: string;
    admin: boolean;
    profilePicture: string | null;
    profileDescription: string | null;
};

export type UpdateProfileDto = {
    id?: number;
    name?: string;
    email?: string;
    admin?: boolean;
};

export type FriendStatusDto = {
    status: 'pending' | 'accepted' | 'declined' | 'none';
};

export type UserActionDto = {
    status: 'completed' | 'joined' | 'seen' | 'declined' | 'none';
    dateCommitted: string;
    dateCompleted: string;
    deadline: string;
};

export type ActionDto = {
    id: number;
    name: string;
    category: string;
    whyJoin: string;
    image: string;
    description: string;
    timeEstimate: string;
    status: 'Active' | 'Upcoming' | 'Past' | 'Draft';
    usersJoined: number;
    myRelation: UserActionDto;
};

export type CreateActionDto = {
    name: string;
    category: string;
    whyJoin: string;
    image: string;
    description: string;
    timeEstimate: string;
    status: 'Active' | 'Upcoming' | 'Past' | 'Draft';
};

export type UpdateActionDto = {
    name?: string;
    category?: string;
    whyJoin?: string;
    image?: string;
    description?: string;
    timeEstimate?: string;
    status?: 'Active' | 'Upcoming' | 'Past' | 'Draft';
};

export type ActionWithRelationDto = {
    id: number;
    name: string;
    category: string;
    whyJoin: string;
    image: string;
    description: string;
    timeEstimate: string;
    status: 'Active' | 'Upcoming' | 'Past' | 'Draft';
    usersJoined: number;
    relation: UserActionDto;
};

export type CreateCommuniqueDto = {
    title: string;
    bodyText: string;
    headerImage: string | null;
    dateCreated: string;
};

export type CommuniqueDto = {
    id: number;
    title: string;
    bodyText: string;
    headerImage: string | null;
    dateCreated: string;
};

export type UpdateCommuniqueDto = {
    title?: string;
    bodyText?: string;
    headerImage?: string | null;
    dateCreated?: string;
};

export type ReadResultDto = {
    read: boolean;
};

export type ImageResponseDto = {
    id: number;
    filename: string;
};

export type DeleteImageResponseDto = {
    deleted: boolean;
};

export type CreatePostDto = {
    title: string;
    content: string;
    actionId?: number;
};

export type Action = {
    id: number;
    name: string;
    category: string;
    whyJoin: string;
    image: string;
    description: string;
    timeEstimate: string;
    status: 'Active' | 'Upcoming' | 'Past' | 'Draft';
    createdAt: string;
    updatedAt: string;
    usersJoined: number;
};

export type User = {
    id: number;
    name: string;
    email: string;
    password: string;
    admin: boolean;
    profilePicture: string | null;
    profileDescription: string | null;
};

export type Post = {
    id: number;
    title: string;
    content: string;
    author: User;
    authorId: number;
    action?: Action;
    actionId?: number;
    replies: Array<Reply>;
    createdAt: string;
    updatedAt: string;
};

export type Reply = {
    id: number;
    content: string;
    author: User;
    authorId: number;
    post: Post;
    postId: number;
    createdAt: string;
    updatedAt: string;
};

export type PostDto = {
    id: number;
    title: string;
    content: string;
    authorId: number;
    action?: Action;
    actionId?: number;
    replies: Array<Reply>;
    createdAt: string;
    updatedAt: string;
    author: UserDto;
};

export type UpdatePostDto = {
    title?: string;
    content?: string;
    actionId?: number;
};

export type CreateReplyDto = {
    content: string;
    postId: number;
};

export type UpdateReplyDto = {
    content?: string;
    postId?: number;
};

export type ReplyDto = {
    id: number;
    content: string;
    authorId: number;
    postId: number;
    createdAt: string;
    updatedAt: string;
    author: UserDto;
};

export type AppHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type AppHealthCheckResponses = {
    200: unknown;
};

export type AuthLoginData = {
    body: SignInDto;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type AuthLoginErrors = {
    401: unknown;
};

export type AuthLoginResponses = {
    200: SignInResponseDto;
};

export type AuthLoginResponse = AuthLoginResponses[keyof AuthLoginResponses];

export type AuthAdminLoginData = {
    body: SignInDto;
    path?: never;
    query?: never;
    url: '/auth/admin/login';
};

export type AuthAdminLoginErrors = {
    401: unknown;
};

export type AuthAdminLoginResponses = {
    200: SignInResponseDto;
};

export type AuthAdminLoginResponse = AuthAdminLoginResponses[keyof AuthAdminLoginResponses];

export type AuthRegisterData = {
    body: SignUpDto;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type AuthRegisterErrors = {
    401: unknown;
};

export type AuthRegisterResponses = {
    /**
     * User created successfully
     */
    201: unknown;
};

export type AuthRefreshTokensData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type AuthRefreshTokensResponses = {
    200: AccessToken;
};

export type AuthRefreshTokensResponse = AuthRefreshTokensResponses[keyof AuthRefreshTokensResponses];

export type AuthMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type AuthMeResponses = {
    200: UserDto;
};

export type AuthMeResponse = AuthMeResponses[keyof AuthMeResponses];

export type AuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type AuthLogoutResponses = {
    200: unknown;
};

export type UserFindMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/me';
};

export type UserFindMeErrors = {
    401: unknown;
};

export type UserFindMeResponses = {
    200: ProfileDto;
};

export type UserFindMeResponse = UserFindMeResponses[keyof UserFindMeResponses];

export type UserFindOneData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/{id}';
};

export type UserFindOneErrors = {
    401: unknown;
};

export type UserFindOneResponses = {
    200: ProfileDto;
};

export type UserFindOneResponse = UserFindOneResponses[keyof UserFindOneResponses];

export type UserUpdateData = {
    body: UpdateProfileDto;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/{id}';
};

export type UserUpdateResponses = {
    200: unknown;
};

export type UserRemoveFriendData = {
    body?: never;
    path: {
        targetUserId: number;
    };
    query?: never;
    url: '/user/friends/{targetUserId}';
};

export type UserRemoveFriendResponses = {
    /**
     * Relationship removed
     */
    200: unknown;
};

export type UserRequestFriendData = {
    body?: never;
    path: {
        targetUserId: number;
    };
    query?: never;
    url: '/user/friends/{targetUserId}';
};

export type UserRequestFriendResponses = {
    /**
     * Friend request is now pending
     */
    200: unknown;
};

export type UserAcceptFriendRequestData = {
    body?: never;
    path: {
        requesterId: number;
    };
    query?: never;
    url: '/user/friends/{requesterId}/accept';
};

export type UserAcceptFriendRequestResponses = {
    /**
     * Friend request accepted
     */
    200: unknown;
};

export type UserDeclineFriendRequestData = {
    body?: never;
    path: {
        requesterId: number;
    };
    query?: never;
    url: '/user/friends/{requesterId}/decline';
};

export type UserDeclineFriendRequestResponses = {
    /**
     * Friend request declined
     */
    200: unknown;
};

export type UserListReceivedRequestsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/friends/requests/received';
};

export type UserListReceivedRequestsResponses = {
    200: Array<UserDto>;
};

export type UserListReceivedRequestsResponse = UserListReceivedRequestsResponses[keyof UserListReceivedRequestsResponses];

export type UserListSentRequestsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/friends/requests/sent';
};

export type UserListSentRequestsResponses = {
    200: Array<UserDto>;
};

export type UserListSentRequestsResponse = UserListSentRequestsResponses[keyof UserListSentRequestsResponses];

export type UserMyFriendRelationshipData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/myfriendrelationship/{id}';
};

export type UserMyFriendRelationshipResponses = {
    200: FriendStatusDto;
};

export type UserMyFriendRelationshipResponse = UserMyFriendRelationshipResponses[keyof UserMyFriendRelationshipResponses];

export type UserListFriendsData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/listfriends/{id}';
};

export type UserListFriendsResponses = {
    200: Array<UserDto>;
};

export type UserListFriendsResponse = UserListFriendsResponses[keyof UserListFriendsResponses];

export type ActionsJoinData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/actions/join/{id}';
};

export type ActionsJoinResponses = {
    201: unknown;
};

export type ActionsCompleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/actions/complete/{id}';
};

export type ActionsCompleteResponses = {
    201: unknown;
};

export type ActionsMyStatusData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/actions/myStatus/{id}';
};

export type ActionsMyStatusResponses = {
    200: UserActionDto;
};

export type ActionsMyStatusResponse = ActionsMyStatusResponses[keyof ActionsMyStatusResponses];

export type ActionsFindAllWithStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/actions/withStatus';
};

export type ActionsFindAllWithStatusResponses = {
    200: Array<ActionDto>;
};

export type ActionsFindAllWithStatusResponse = ActionsFindAllWithStatusResponses[keyof ActionsFindAllWithStatusResponses];

export type ActionsFindAllPublicData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/actions';
};

export type ActionsFindAllPublicResponses = {
    200: Array<ActionDto>;
};

export type ActionsFindAllPublicResponse = ActionsFindAllPublicResponses[keyof ActionsFindAllPublicResponses];

export type ActionsFindAllWithDraftsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/actions/all';
};

export type ActionsFindAllWithDraftsResponses = {
    200: Array<ActionDto>;
};

export type ActionsFindAllWithDraftsResponse = ActionsFindAllWithDraftsResponses[keyof ActionsFindAllWithDraftsResponses];

export type ActionsSseActionCountData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/actions/live/{id}';
};

export type ActionsSseActionCountResponses = {
    200: unknown;
};

export type ActionsLiveListData = {
    body?: never;
    path?: never;
    query: {
        ids: string;
    };
    url: '/actions/live-list';
};

export type ActionsLiveListResponses = {
    200: unknown;
};

export type ActionsRemoveData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/actions/{id}';
};

export type ActionsRemoveResponses = {
    200: unknown;
};

export type ActionsFindOneData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/actions/{id}';
};

export type ActionsFindOneErrors = {
    401: unknown;
};

export type ActionsFindOneResponses = {
    200: ActionDto;
};

export type ActionsFindOneResponse = ActionsFindOneResponses[keyof ActionsFindOneResponses];

export type ActionsUpdateData = {
    body: UpdateActionDto;
    path: {
        id: number;
    };
    query?: never;
    url: '/actions/{id}';
};

export type ActionsUpdateResponses = {
    200: unknown;
};

export type ActionsCreateData = {
    body: CreateActionDto;
    path?: never;
    query?: never;
    url: '/actions/create';
};

export type ActionsCreateResponses = {
    200: ActionDto;
};

export type ActionsCreateResponse = ActionsCreateResponses[keyof ActionsCreateResponses];

export type ActionsFindCompletedForUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/actions/completed/{id}';
};

export type ActionsFindCompletedForUserResponses = {
    200: Array<ActionWithRelationDto>;
};

export type ActionsFindCompletedForUserResponse = ActionsFindCompletedForUserResponses[keyof ActionsFindCompletedForUserResponses];

export type CommuniquesFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/communiques';
};

export type CommuniquesFindAllResponses = {
    200: Array<CommuniqueDto>;
};

export type CommuniquesFindAllResponse = CommuniquesFindAllResponses[keyof CommuniquesFindAllResponses];

export type CommuniquesCreateData = {
    body: CreateCommuniqueDto;
    path?: never;
    query?: never;
    url: '/communiques';
};

export type CommuniquesCreateResponses = {
    201: CreateCommuniqueDto;
};

export type CommuniquesCreateResponse = CommuniquesCreateResponses[keyof CommuniquesCreateResponses];

export type CommuniquesRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/communiques/{id}';
};

export type CommuniquesRemoveResponses = {
    200: boolean;
};

export type CommuniquesRemoveResponse = CommuniquesRemoveResponses[keyof CommuniquesRemoveResponses];

export type CommuniquesFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/communiques/{id}';
};

export type CommuniquesFindOneResponses = {
    200: CommuniqueDto;
};

export type CommuniquesFindOneResponse = CommuniquesFindOneResponses[keyof CommuniquesFindOneResponses];

export type CommuniquesUpdateData = {
    body: UpdateCommuniqueDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/communiques/{id}';
};

export type CommuniquesUpdateResponses = {
    200: CommuniqueDto;
};

export type CommuniquesUpdateResponse = CommuniquesUpdateResponses[keyof CommuniquesUpdateResponses];

export type CommuniquesGetReadData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/communiques/{id}/read';
};

export type CommuniquesGetReadResponses = {
    200: ReadResultDto;
};

export type CommuniquesGetReadResponse = CommuniquesGetReadResponses[keyof CommuniquesGetReadResponses];

export type CommuniquesReadData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/communiques/{id}/read';
};

export type CommuniquesReadResponses = {
    200: unknown;
};

export type ImagesUploadImageData = {
    body: {
        image?: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/images/upload';
};

export type ImagesUploadImageResponses = {
    201: ImageResponseDto;
};

export type ImagesUploadImageResponse = ImagesUploadImageResponses[keyof ImagesUploadImageResponses];

export type ImagesGetImageData = {
    body?: never;
    path: {
        filename: string;
    };
    query?: never;
    url: '/images/{filename}';
};

export type ImagesGetImageResponses = {
    /**
     * Returns an image file
     */
    200: Blob | File;
};

export type ImagesGetImageResponse = ImagesGetImageResponses[keyof ImagesGetImageResponses];

export type ImagesDeleteImageData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/images/{id}';
};

export type ImagesDeleteImageResponses = {
    200: DeleteImageResponseDto;
};

export type ImagesDeleteImageResponse = ImagesDeleteImageResponses[keyof ImagesDeleteImageResponses];

export type ForumFindAllPostsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/forum/posts';
};

export type ForumFindAllPostsResponses = {
    200: Array<PostDto>;
};

export type ForumFindAllPostsResponse = ForumFindAllPostsResponses[keyof ForumFindAllPostsResponses];

export type ForumCreatePostData = {
    body: CreatePostDto;
    path?: never;
    query?: never;
    url: '/forum/posts';
};

export type ForumCreatePostResponses = {
    200: PostDto;
};

export type ForumCreatePostResponse = ForumCreatePostResponses[keyof ForumCreatePostResponses];

export type ForumFindPostsByActionData = {
    body?: never;
    path: {
        actionId: string;
    };
    query?: never;
    url: '/forum/posts/action/{actionId}';
};

export type ForumFindPostsByActionResponses = {
    200: Array<PostDto>;
};

export type ForumFindPostsByActionResponse = ForumFindPostsByActionResponses[keyof ForumFindPostsByActionResponses];

export type ForumRemovePostData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/forum/posts/{id}';
};

export type ForumRemovePostResponses = {
    200: unknown;
};

export type ForumFindOnePostData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/forum/posts/{id}';
};

export type ForumFindOnePostResponses = {
    200: PostDto;
};

export type ForumFindOnePostResponse = ForumFindOnePostResponses[keyof ForumFindOnePostResponses];

export type ForumUpdatePostData = {
    body: UpdatePostDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/forum/posts/{id}';
};

export type ForumUpdatePostResponses = {
    200: PostDto;
};

export type ForumUpdatePostResponse = ForumUpdatePostResponses[keyof ForumUpdatePostResponses];

export type ForumFindPostsByUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/forum/posts/user/{id}';
};

export type ForumFindPostsByUserResponses = {
    200: Array<PostDto>;
};

export type ForumFindPostsByUserResponse = ForumFindPostsByUserResponses[keyof ForumFindPostsByUserResponses];

export type ForumCreateReplyData = {
    body: CreateReplyDto;
    path?: never;
    query?: never;
    url: '/forum/replies';
};

export type ForumCreateReplyResponses = {
    200: Reply;
};

export type ForumCreateReplyResponse = ForumCreateReplyResponses[keyof ForumCreateReplyResponses];

export type ForumRemoveReplyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/forum/replies/{id}';
};

export type ForumRemoveReplyResponses = {
    200: unknown;
};

export type ForumUpdateReplyData = {
    body: UpdateReplyDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/forum/replies/{id}';
};

export type ForumUpdateReplyResponses = {
    200: ReplyDto;
};

export type ForumUpdateReplyResponse = ForumUpdateReplyResponses[keyof ForumUpdateReplyResponses];

export type ClientOptions = {
    baseUrl: string;
};